---
import { getLanguageFromFilename } from "@src/lib/translations";
import PostLayout from "@src/layouts/PostLayout.astro";
import { removeTrailingSlash } from "@src/lib/urlhelpers";

export const allContent = () => Astro.glob("../../lib/content/**/*.{md,mdx}");

export async function getStaticPaths() {
    const paths = (await allContent()).map((content) => {
        const locale = getLanguageFromFilename(content.file);

        return {
            params: {
                locale: locale,
                slug: content.frontmatter.translationKey,
            },

            props: {
                locale: locale,
                content: { ...content, locale },
            },
        };
    });
    return paths.filter(({ params }) => !!params.locale && !!params.slug);
}

const { locale, content } = Astro.props;

const alternativeLanguages = (await allContent())
    .filter(
        (p) =>
            p.frontmatter.translationKey === content.frontmatter.translationKey
    )
    .map((p) => getLanguageFromFilename(p.file))
    .filter((l) => l !== locale);

const alternativeLanguageMap: { [key: string]: string } =
    alternativeLanguages.reduce((acc, lang) => {
        return {
            ...acc,
            [lang]: new URL(
                `../${lang}/${content.frontmatter.translationKey}`,
                removeTrailingSlash(Astro.url.href)
            ).href,
        };
    }, {});
---

<PostLayout {alternativeLanguageMap} {locale} post={content}>
    <content.Content />
</PostLayout>
